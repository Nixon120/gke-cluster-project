openapi: 3.0.3
info:
  title: Secure Demo API
  version: "1.0.0"
  description: >
    Secure baseline OpenAPI spec for testing. Enforces HTTPS, auth, validation,
    documented rate limiting, and minimal information exposure.

servers:
  - url: https://api.example.com/v1

# ✅ Global auth required by default
security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      summary: Exchange credentials for JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 254
                password:
                  type: string
                  minLength: 12
                  maxLength: 128
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$'  # at least 1 lower, 1 upper, 1 digit
      responses:
        "200":
          description: Authenticated
          headers:
            RateLimit-Limit:
              schema: { type: integer }
              description: Max number of requests allowed in the window.
            RateLimit-Remaining:
              schema: { type: integer }
            RateLimit-Reset:
              schema: { type: integer, description: Seconds until reset }
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Short-lived JWT access token
                  token_type:
                    type: string
                    enum: [Bearer]
        "401":
          $ref: "#/components/responses/Unauthorized"
      # ⛔️ Login is one of the few routes that does not require prior auth
      security: []

  /users:
    get:
      summary: List users
      parameters:
        - in: query
          name: q
          schema: { type: string, maxLength: 100 }
          description: Optional search term
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0, default: 0 }
      responses:
        "200":
          description: OK
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
          content:
            application/json:
              schema:
                type: array
                maxItems: 100
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"

  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, minLength: 1, maxLength: 64 }
    get:
      summary: Get user by id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/deleteUser:
    post:
      summary: Delete a user (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId]
              properties:
                userId:
                  type: string
                  minLength: 1
                  maxLength: 64
      responses:
        "204":
          description: Deleted
        "403":
          $ref: "#/components/responses/Forbidden"
      # ✅ Explicitly admin-protected
      security:
        - bearerAuth: [admin]

  /payments/export:
    get:
      summary: Export payments as CSV (paginated)
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
      responses:
        "200":
          description: OK
          headers:
            RateLimit-Limit: { schema: { type: integer } }
            RateLimit-Remaining: { schema: { type: integer } }
            RateLimit-Reset: { schema: { type: integer } }
          content:
            text/csv:
              schema:
                type: string
                format: binary

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string
          maxLength: 512
        code:
          type: string
          maxLength: 64

    User:
      type: object
      required: [id, email, name, roles, createdAt]
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 64
        email:
          type: string
          format: email
          maxLength: 254
        name:
          type: string
          maxLength: 100
        roles:
          type: array
          items:
            type: string
            enum: [user, admin, auditor]
          minItems: 1
          maxItems: 5
        createdAt:
          type: string
          format: date-time

    UserCreate:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          minLength: 12
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$'
        name:
          type: string
          maxLength: 100
        roles:
          type: array
          items:
            type: string
            enum: [user, admin, auditor]
          maxItems: 3
